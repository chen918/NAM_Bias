set.seed(99999)
if (!require(mvtnorm)) {
  install.packages("mvtnorm")
  library(mvtnorm)
}
if (!require(invgamma)) {
  install.packages("invgamma")
  library(invgamma)
}
if (!require(sna)) {
  install.packages("sna")
  library(sna)
}
if (!require(coda)) {
  install.packages("coda")
  library(coda)
}
if (!require(truncnorm)) {
  install.packages("truncnorm")
  library(truncnorm)
}

# between sub-network density: 0.05, 0.1
btw_den=0.05

# Number of sub-network: 3,5,7,10
nsub=3

itl=500

size = rep(20, nsub)
#True value of rho:-0.5,-0.2,0,0.2,0.5
rho=-0.5
p = rep(0.4, nsub)

c_node = nsub
node_full=sum(size)


medianRho_v = c()
coverage = 0
ubv = c()
lbv = c()

k=1

while(k<=itl){
  
  ################
  W_full = matrix(NA,nrow = node_full, ncol = node_full)
  
  for(wi in 1:c_node){
    idx1 = 1+sum(size[1:wi])-size[wi]
    idx2 = sum(size[1:wi])
    W_full[idx1:idx2,idx1:idx2] = rgraph(size[wi], m=1, tprob=p[wi], mode="graph", diag = F, replace=FALSE,tielist=NULL, return.as.edgelist= F )
  }
  
  idxsample=function(m,n){
    idx=which(is.na(m),F) # Index of positions of NA's in the matrix
    pos=sample(idx,n,replace=F) # Random n sample of matrix indexes
    return(pos)
  }
  
  W_full[lower.tri(W_full)] = 0
  
  #This call will sample and store n "positions" with value==NA in your matrix
  pos=idxsample( W_full,n=(20*nsub)*(20*nsub-1)*btw_den/2)
  
  W_full[pos] = 1
  
  W_full[is.na(W_full)] = 0
  
  W_full[lower.tri(W_full)]<-t(W_full)[lower.tri(W_full)] 
  
  
  ################
  
  X_full=cbind(1,matrix(rnorm(node_full*3),ncol=3))
  BBeta=matrix(c(-0.1,0.1,0.2,0.3),nrow =4)
  Rho_m = c()
  
  ##################
  
  W = W_full
  X = X_full
  node = node_full
  
  Exp = rpois(node,1)+1
  Off = log(Exp)
  
  W=t(apply(W, 1, function(x) (x/sum(x))))
  
  W[which(is.na(W))]=1/(node-1)
  
  diag(W)<-0
  
  Mu= exp(solve(diag(x=1,nrow=node)-rho*W)%*%(X%*%BBeta)+Off)
  
  Y=rpois(n=node, lambda=Mu)
  
  Lamda = eigen(W)$values
  
  Lamda = Re(Lamda)
  
  ######
  #MCMC
  num=50000
  Rho = rep(0, num)
  
  betamt = matrix(0, 4, num)
  
  Rho[1]=rho
  betamt[,1]=BBeta
  ####
  I = t(rep(1,node))
  V = solve(t(X)%*%t(solve(diag(1,node)-rho*W))%*%diag(c(exp(solve(diag(1,node)-rho*W)%*%X%*%BBeta+Off)))%*%solve(diag(1,node)-rho*W)%*%X)
  count = 0
  countBt = 0
  i = 2
  while(i<=num){
    Rho[i] = Rho[i-1]+rnorm(1, mean = 0, sd = 20)
    
    if (Rho[i]>1/max(Lamda) | Rho[i]< 1/min(Lamda)){
      next
    }
    
    proportion = exp((t(Y)%*%(solve(diag(1,node)-Rho[i]*W)%*%X%*%betamt[,i-1]+Off)-I%*%exp(solve(diag(1,node)-Rho[i]*W)%*%X%*%betamt[,i-1]+Off))-
                       (t(Y)%*%(solve(diag(1,node)-Rho[i-1]*W)%*%X%*%betamt[,i-1]+Off)-I%*%exp(solve(diag(1,node)-Rho[i-1]*W)%*%X%*%betamt[,i-1]+Off)))*
      dtruncnorm(Rho[i-1], a=1/min(Lamda), b=1/max(Lamda), mean=Rho[i],sd=20)/dtruncnorm(Rho[i], a=1/min(Lamda), b=1/max(Lamda), mean=Rho[i-1],sd=20)
    
    proportion = min(1, Re(proportion))
    
    if (runif(1) > proportion){
      Rho[i]=Rho[i-1]
      count = count+1
    }
    
    betamt[,i] = betamt[,i-1]+rmvnorm(1, mean = rep(0,4), sigma=2.5*V)
    
    proportionbeta = exp((t(Y)%*%(solve(diag(1,node)-Rho[i]*W)%*%X%*%betamt[,i]+Off)-I%*%exp(solve(diag(1,node)-Rho[i]*W)%*%X%*%betamt[,i]+Off))-
                           (t(Y)%*%(solve(diag(1,node)-Rho[i]*W)%*%X%*%betamt[,i-1]+Off)-I%*%exp(solve(diag(1,node)-Rho[i]*W)%*%X%*%betamt[,i-1]+Off)))
    
    proportionbeta = min(1, Re(proportionbeta))
    
    if (runif(1) > proportionbeta){
      betamt[,i]=betamt[,i-1]
      countBt = countBt+1
    }
    
    i = i+1
    
  }
  
  
  medianRho_v[k] = median(Rho[-(1:5000)])
  
  
  Rate<-(num-count-1)/(num-1)
  RateB<-(num-countBt-1)/(num-1)
  
  lb=quantile(Rho[-(1:5000)],0.025)
  ub=quantile(Rho[-(1:5000)],0.975)
  lbv = c(lbv,lb)
  ubv = c(ubv,ub)
  if(rho<=ub & rho>=lb){
    coverage=coverage+1
  }
  
  cat("k = ", k,"\n")
  
  k = k + 1
  
}

res = c(nsub,
        rho,
        mean(medianRho_v)-rho,
        sum((medianRho_v-rho)^2)/itl,
        coverage/itl)


